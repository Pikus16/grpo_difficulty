{"prompt": "Implement a Python function `is_prime(n)` that takes an integer `n \u2265 2` and returns True if `n` is prime and False otherwise.", "outputs": ["## Implementing a Prime Check Function in Python\n\nHere is a high-quality, readable, and well-documented Python function that checks whether a given integer is prime or not.\n\n### Code\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks whether a given integer is prime or not.\n\n    Args:\n    n (int): The number to be checked for primality.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n\n    Raises:\n    TypeError: If n is not an integer.\n    ValueError: If n is less than 2.\n    \"\"\"\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Check if n is less than 2\n    if n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2.\")\n\n    # 2 is the only even prime number\n    if n == 2:\n        return True\n\n    # All other even numbers are not prime\n    if n % 2 == 0:\n        return False\n\n    # Check odd factors up to the square root of n\n    for i in range(3", "## Prime Number Checker Function\n\nHere is a high-quality, readable, and well-documented Python function that checks if a given integer is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n\n    Raises:\n    ValueError: If n is less than 2.\n    \"\"\"\n\n    # Check if n is less than 2, in which case it's not prime\n    if n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2.\")\n\n    # Check if n is divisible by any number up to its square root\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    # If the number is not divisible by any number up to its square root, it's prime\n    return True\n```\n\n### Example Use Cases:\n\n```python\n# Test the function with some prime numbers\nprint(is_prime(2))   # Output: True\nprint(is_prime(3))   # Output", "**Implementing a Prime Number Checker in Python**\n====================================================\n\nHere's a high-quality, readable, and well-documented Python function `is_prime(n)` that checks if a given integer `n` is prime:\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given integer `n` is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        # Check if `n` has any divisors other than 1 and itself\n        if n % i == 0:\n            return False\n    # If no divisors are found, `n` is prime\n    return True\n```\n\n**Example Use Cases:**\n--------------------\n\n```python\nprint(is_prime(2))  # Output: True\nprint(is_prime(15))  # Output: False\nprint(is_prime(29))  # Output: True\n", "**Prime Number Check Function**\n================================\n\n### Implementation\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n\n    Raises:\n        ValueError: If n is less than 2.\n    \"\"\"\n\n    if n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2\")\n\n    # Check if n is less than 2, in which case it's not prime\n    if n == 2:\n        return True\n\n    # Check if n is even, in which case it's not prime\n    if n % 2 == 0:\n        return False\n\n    # Check odd factors up to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    # If no factors found, n is prime\n    return True\n```\n\n### Example Use Cases\n\n```python\nprint(is_prime(2))  # True\nprint(is_prime(3))  #", "**Implementing a Primality Test in Python**\n===========================================\n\nHere's a Python function `is_prime(n)` that uses a simple trial division approach to check if a given integer `n` is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n\n**Explanation**\n\n1.  If `n` is less than or equal to 1, it's not prime, so return False.\n2.  If `n` is 2 or 3, it's prime, so return True.\n3.  If `n` is divisible by", "**Implementing the `is_prime` Function in Python**\n=====================================================\n\nHere's a Python function that checks whether a given integer `n` is prime or not. This function uses a simple approach by checking divisibility up to the square root of `n`.\n\n```python\nimport math\n\ndef is_prime(n):\n    \"\"\"\n    Checks whether a given integer n is prime or not.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for d in range(3, max_divisor + 1, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\n1.  We first handle the base cases where `n` is less than or equal to 1, in which case `n` is not prime.\n2.  If `n` is 2, it's the only even prime number", "## Implementing a Prime Number Checker in Python\n======================================================\n\nHere's a high-quality, readable, and well-documented implementation of the `is_prime` function in Python:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n\n    Raises:\n        ValueError: If n is not an integer or is less than 2.\n    \"\"\"\n\n    if not isinstance(n, int) or n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2\")\n\n    # Check if n is a perfect square of a prime number\n    if n < 4:\n        return n == 2\n\n    # Check divisibility from 3 to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True\n```\n\n### Explanation\n\n1.  We first validate the input `n`. If it's not an integer or is less than 2, we raise", "**Prime Number Checker Function**\n================================\n\nHere is a Python function that checks if a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function takes an integer `n` as input and checks if it's prime. Here's a step-by-step breakdown:\n\n1. If `n` is less than 2, it's not prime, so we return `False`.\n2. We only need to check divisibility up to the square root of `n`. This is because a larger factor of the number would be a multiple of a smaller factor that has already been checked.\n3. We iterate from 2 to the square root of `n` and check if `n` is divisible by any of these", "**Implementation of Prime Number Check Function**\n====================================================\n\nHere is a simple and efficient implementation of the `is_prime` function in Python. This function uses a helper function `helper` to check if a number is divisible by any number up to its square root.\n\n```python\nimport math\n\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for d in range(3, 1 + max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\nprint(is_prime(37))  # True\nprint(is_prime(48))  # False\n```\n\n**Explanation**\n---------------\n\nThe function `is", "**Implementing the `is_prime` Function in Python**\n=====================================================\n\nHere is a Python function that checks whether a given integer `n` is prime or not:\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks whether a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n**Explanation**\n---------------\n\nThis function takes an integer `n` as input and checks whether it is prime. Here's a step-by-step breakdown:\n\n1. **Edge case**: If `n` is less than 2, it is not prime, so we immediately return `False`.\n2. We only need to check divisibility up to the square root of `n`, so we use `int(n ** 0.5) + 1` as the upper bound for our loop.\n3. We iterate over all numbers `", "## Implementing a Prime Number Checker in Python\n\nYou can implement a Python function `is_prime(n)` that checks whether a given integer `n` is prime or not. This function uses a simple iterative approach to check for factors from 2 to the square root of `n`.\n\n### Code\n```python\nimport math\n\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n### Explanation\n\n1.  We start by checking if the number is less than or equal to 1, as these numbers are not prime.\n2.  We loop through numbers from 2 to the square root of `n` (inclusive) to check for factors.\n3.  If `n` is divisible by any of these numbers, it's not prime.\n4.  If the loop completes without finding any factors, `", "**Implementing a Prime Number Checker in Python**\n====================================================\n\nHere's a Python function `is_prime(n)` that checks whether a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime\n        return False\n    if n == 2:\n        # 2 is the only even prime number\n        return True\n    if n % 2 == 0:\n        # All other even numbers are not prime\n        return False\n    # Check odd factors up to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            # If n is divisible by any odd number, it's not prime\n            return False\n    # If n is not divisible by any number, it's prime\n    return True\n```\n\n**Example Use Cases:**\n\n```", "## Prime Number Checker Function\n### Python Implementation\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to be checked for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:  # Numbers less than 2 are not prime\n        return False\n    for i in range(2, int(n ** 0.5) + 1):  # Only check up to the square root of n\n        if n % i == 0:  # If n is divisible by any number between 2 and sqrt(n), it's not prime\n            return False\n    return True  # If n is not divisible by any of the above numbers, it's prime\n```\n\n### Example Use Cases\n\n```python\nprint(is_prime(2))  # True\nprint(is_prime(15))  # False\nprint(is_prime(37))  # True\nprint(is_prime(48))  # False\n```\n\n### Explanation\n\nThis function uses a simple trial division method to check if a given number `n` is prime. It iter", "**Implementing the `is_prime` Function**\n======================================\n\nHere's a Python function `is_prime(n)` that takes an integer `n \u2265 2` and returns `True` if `n` is prime and `False` otherwise:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function first checks if the number `n` is less than or equal to 1, in which case it immediately returns `False` since prime numbers are greater than 1.\n\nNext, it iterates from 2 to the square root of `n` (inclusive) and checks if `n` is divisible by any of these numbers. If it finds a divisor, it immediately returns `False`.\n\nIf the loop completes without finding a divisor, it returns", "**Prime Number Checker Function**\n================================\n\nHere is a Python function `is_prime(n)` that checks if a given integer `n` is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(2))    # True\nprint(is_prime(15))   # False\nprint(is_prime(37))   # True\nprint(is_prime(48))   # False\n```\n\n**Explanation**\n-------------\n\nThis function works by checking if the number `n` is divisible by any number between 2 and the square root of `n` (inclusive). If `n` is divisible by any of these numbers, it's not a prime number. If `n` is not divisible by any of these numbers, it's", "**Prime Number Checker Function**\n================================\n\nHere is a Python function `is_prime(n)` that uses a simple trial division method to check if a number is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n\n**Explanation:**\n\n1. If `n` is less than or equal to 1, it is not prime, so we return False.\n2. If `n` is 2 or 3, it is prime, so we return True.\n3. If `n` is divisible by 2 or 3, it is not prime, so we", "## Implementing the `is_prime` Function in Python\n### Overview\n\nThe `is_prime` function checks if a given integer `n` is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n### Code\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n\n### Explanation\n\nThis function uses a simple trial division method to check for primality. Here's a step-by-step breakdown:\n\n1. If `n` is less than or equal to 1, it's not prime", "**Implementing a Primality Test Function in Python**\n=====================================================\n\nHere's a Python function `is_prime(n)` that uses a simple iterative approach to check if a given integer `n` is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n\nThis function takes advantage of the fact that all primes are of the form `6k \u00b1 1`, where `k` is a positive integer. Therefore, we only need to check divisibility by 2 and 3, and then increment the loop variable by 6 to check the next possible prime", "**Implementation**\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer `n` is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n**Explanation**\n\nThis function takes an integer `n` and checks if it's prime by attempting to divide it by all integers from 2 up to the square root of `n`. If any of these divisions result in a remainder of 0, the number is not prime, so the function returns `False`. If no such division results in a remainder of 0, the number is prime, and the function returns `True`.\n\n**Example Use Cases**\n\n```python\nprint(is_prime(2))   # True\nprint(is_prime(3))   # True\nprint(is_prime(4))   # False\nprint(is_prime(5))   # True\nprint(is_prime(6))", "**Prime Number Checker Function**\n================================\n\nHere's a Python function `is_prime(n)` that checks if a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime\n        return False\n    if n == 2:\n        # 2 is the only even prime number\n        return True\n    if n % 2 == 0:\n        # Even numbers greater than 2 are not prime\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        # Check odd divisors up to the square root of n\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  #", "**Implementing a Prime Number Checker in Python**\n====================================================\n\nHere's a Python function `is_prime(n)` that checks whether a given integer `n` is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(2))    # Output: True\nprint(is_prime(3))    # Output: True\nprint(is_prime(4))    # Output: False\nprint(is_prime(5))    # Output: True\nprint(is_prime(6))    # Output: False\n```\n\n**Explanation**\n---------------\n\n1", "**Implementing the `is_prime` Function**\n=====================================\n\nHere's a Python function `is_prime(n)` that checks whether a given integer `n` is prime or not.\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks whether a given integer is prime or not.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:  # Numbers less than 2 are not prime\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:  # If the number is divisible by any integer between 2 and sqrt(n), it's not prime\n            return False\n    return True\n```\n\n**Example Usage**\n---------------\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\nprint(is_prime(37))  # True\nprint(is_prime(48))  # False\n```\n\n**Explanation**\n-------------\n\nThe function `is_prime(n)` works by checking divisibility of `", "**Prime Number Checker Function**\n================================\n\nHere's a Python function that checks whether a given integer is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Example Use Cases:**\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\nprint(is_prime(37))  # True\nprint(is_prime(48))  # False\n```\n\n**Explanation:**\n\n1. We first check if the number is less than 2, in which case it's not prime.\n2. We only need to check up to the square root of the number because a larger factor of the number would be a multiple of a smaller factor that has already been checked.\n3. If the number is divisible by any of the numbers from 2", "**Implementation of `is_prime` Function**\n======================================\n\nHere's a Python function that uses a simple and efficient algorithm to check if a given number is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given number is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Explanation and Advice**\n------------------------\n\nThis function works by:\n\n1.  Checking if the number is less than or equal to 1 (not prime) or if it's 2 (the only even prime number).\n2.  Checking if the number is divisible by 2 (not prime if true).\n3.  Iterating from 3 to the square root of the number (", "## Implementing the `is_prime` Function in Python\n\nHere's a Python function that checks if a given integer `n` is prime or not. This function uses a helper function `check_prime_factors` to efficiently verify if `n` has any prime factors.\n\n```python\ndef check_prime_factors(n):\n    \"\"\"Check if a number has any prime factors.\"\"\"\n    if n <= 1:\n        return True  # 1 and numbers less than 2 are prime factors\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True  # if n is divisible by any number, it's not prime\n    return False  # if no prime factors found, n is prime\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False  # numbers less than 2 are not prime\n    return not check_prime_factors(n)\n\n# Example usage\nprint(is_prime(11))   # Output: True\nprint(is_prime(15))   # Output: False\nprint(is_prime(1))    # Output: False\nprint(is_prime(2))    #", "**Prime Number Check Function**\n================================\n\nHere's a simple and efficient Python function to check if a given integer `n` is prime or not. This function uses a loop to check divisibility from 2 to the square root of `n`.\n\n```python\nimport math\n\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for d in range(5, 1 + max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Example Use Cases**\n---------------------\n\n```python\nprint(is_prime(2))   # Output: True\nprint(is_prime(3))   # Output: True\nprint(is_prime(4))   # Output: False\nprint(is_prime(5))", "**Implementation of the `is_prime` function**\n=====================================================\n\nHere's a simple and efficient implementation of the `is_prime` function using Python:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function uses a simple trial division method to check if a number is prime. Here's how it works:\n\n1. If `n` is less than 2, it's not prime, so we return `False`.\n2. We only need to check divisibility up to the square root of `n` because a larger factor of `n` would be a multiple of a smaller factor that has already been checked.\n3. We iterate over all numbers from 2 to the square root of `n` (inclusive) and check if `n` is divisible", "**Prime Number Checker Function**\n================================\n\nHere is a Python function that checks if a given integer `n` is prime or not. This function uses a helper function `is_prime_helper` to perform the actual prime check.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer `n` is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if not isinstance(n, int) or n < 2:\n        return False\n\n    def is_prime_helper(x):\n        \"\"\"\n        Helper function to check if a number is prime.\n\n        Args:\n            x (int): The number to check for primality.\n\n        Returns:\n            bool: True if `x` is prime, False otherwise.\n        \"\"\"\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    return is_prime_helper(n)\n```\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(2))  #", "**Prime Number Checker Function**\n================================\n\nHere's a Python function `is_prime(n)` that checks if a given integer `n` is prime:\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function works by iterating over all numbers from 2 to the square root of `n` (inclusive) and checking if `n` is divisible by any of them. If it is, `n` is not prime and the function returns `False`. If it's not divisible by any of these numbers, `n` is prime and the function returns `True`.\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\nprint(is_prime", "**Implementing a Prime Number Checker in Python**\n====================================================\n\nHere's a Python function `is_prime(n)` that checks if a given integer `n` is prime or not. This function uses a simple trial division method to determine primality.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer `n` is prime or not.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n <= 1:  # 1 and numbers less than 2 are not prime\n        return False\n    if n <= 3:  # 2 and 3 are prime\n        return True\n    if n % 2 == 0 or n % 3 == 0:  # if the number is divisible by 2 or 3, it's not prime\n        return False\n    i = 5\n    while i * i <= n:  # only need to check up to the square root of n\n        if n % i == 0 or n % (i + 2) == 0:  # check if n", "**Implementing a Prime Number Checker in Python**\n======================================================\n\nHere's a simple and efficient implementation of the `is_prime` function using a helper function to check divisibility up to the square root of `n`.\n\n```python\nimport math\n\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer `n` is prime.\n    \n    Args:\n    n (int): The number to check for primality.\n    \n    Returns:\n    bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # 0 and 1 are not prime numbers\n        return False\n    if n == 2:\n        # 2 is the only even prime number\n        return True\n    if n % 2 == 0:\n        # All other even numbers are not prime\n        return False\n    # Check divisibility up to the square root of n\n    for i in range(3, math.isqrt(n) + 1, 2):\n        if n % i == 0:\n            # If n is divisible by any number between 3 and its square root, it's not prime\n            return False\n    # If n is not divisible", "**Implementing a Prime Number Checker in Python**\n=====================================================\n\nHere's a high-quality, readable, and well-documented Python function to check if a given integer `n` is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n\n    Raises:\n    ValueError: If n is not an integer or n < 2.\n    \"\"\"\n    if not isinstance(n, int) or n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2\")\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Explanation**\n\nThis function first checks if the input `n` is an integer and if it's greater than or equal to 2. If not, it raises a", "## Implementing a Prime Check Function in Python\n### Code\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n### Explanation\n\nThis function works by checking if the given number `n` has any divisors other than 1 and itself. If it does, it's not a prime number, and the function immediately returns `False`. If no divisors are found after checking up to the square root of `n`, the number is prime, and the function returns `True`.\n\n### Example Use Cases\n\n```python\nprint(is_prime(2))    # True\nprint(is_prime(15))   # False\nprint(is_prime(29))   # True\nprint(is_prime(34))   # False\n```\n\n### Tips\n\n- The function uses a simple trial", "**Implementing a Prime Number Check Function in Python**\n=====================================================\n\nHere's a Python function `is_prime(n)` that uses a helper function `helper(n, i)` to check if a number is prime.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n\n    Raises:\n    ValueError: If n is less than 2.\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2\")\n\n    def helper(n, i):\n        \"\"\"\n        Helper function to check if a number is divisible by any number up to its square root.\n\n        Args:\n        n (int): The number to check.\n        i (int): The current divisor.\n\n        Returns:\n        bool: True if the number is not divisible by any number up to its square root, False otherwise.\n        \"\"\"\n        if i * i > n:\n            return True\n        if n % i == 0:\n            return False\n        return helper(n, i + 1)\n\n    return helper(n, 2", "## Python Function to Check for Primality\n\nHere is a Python function that checks whether a given integer is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime\n        return False\n    if n == 2:\n        # 2 is the only even prime number\n        return True\n    if n % 2 == 0:\n        # Even numbers greater than 2 are not prime\n        return False\n    # Check odd factors up to the square root of n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n```\n\n### Explanation\n\nThis function checks for primality using a simple trial division method. Here's a step-by-step breakdown:\n\n1.  **Edge cases**: It checks if the input `n` is less than or equal to ", "**Prime Number Check Function**\n================================\n\nHere's a Python function `is_prime(n)` that checks if a given integer `n` is prime. This function uses a simple trial division method to test for primality.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer `n` is prime.\n\n    Args:\n        n (int): The number to be checked for primality.\n\n    Returns:\n        bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Example Use Cases**\n---------------------\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\nprint(is_prime(37))  # True\nprint(is_prime(48))  # False\n```\n\n**Explanation**\n---------------\n\n1.  If `n` is less than or equal to 1, it's not a prime number, so we immediately return `False`.\n2.  We only need to check divisors up", "## Python Function to Check for Primality\n\nHere's a Python function that checks whether a given integer is prime or not. This function uses a simple trial division method, checking for factors up to the square root of the input number.\n\n```python\nimport math\n\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n\n    Raises:\n        ValueError: If n is less than 2.\n    \"\"\"\n\n    if n < 2:\n        raise ValueError(\"Input must be an integer greater than 1\")\n\n    if n == 2:\n        return True\n\n    # Check if n is even\n    if n % 2 == 0:\n        return False\n\n    # Check odd factors\n    for i in range(3, math.isqrt(n) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True\n```\n\n### Example Use Cases:\n\n```python\nprint(is_prime(2))   # Returns True\nprint(is_prime(37))  # Returns True\nprint(is_prime(", "**Implementing the `is_prime` Function**\n=====================================\n\nHere is a Python function that implements the `is_prime` function using a simple trial division method:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function works by checking if the input number `n` is divisible by any number up to its square root. If it is, then it's not a prime number. If no divisors are found, the number is prime.\n\n**Example Use Cases**\n---------------------\n\n```python\nprint(is_prime(2))  # True\nprint(is_prime(15))  # False\nprint(is_prime(29))  # True\nprint(is_prime(31))  # True\nprint(is_prime(45))  # False\n```\n\n**Optimization**\n", "**Prime Number Checker Function**\n================================\n\nHere's a Python function that checks if a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function first checks if the number `n` is less than 2, in which case it's not prime. Then it checks for divisibility from 2 to the square root of `n` (since any factor larger than the square root would have a corresponding factor smaller than the square root). If `n` is divisible by any of these numbers, it's not prime. If it's not divisible by any of these numbers, it's prime.\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23", "**Prime Number Checker Function**\n================================\n\nHere's a Python function that checks whether a given integer `n` is prime or not. This function uses a simple trial division method.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if n is prime, False otherwise.\n\n    Raises:\n        ValueError: If n is not an integer or if n < 2.\n    \"\"\"\n\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    if n < 2:\n        return False\n\n    # Check divisibility up to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n```\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(2))  # Output: True\nprint(is_prime(3))  # Output: True\nprint(is_prime(4))  # Output: False\nprint(is_prime(10)) # Output: False\nprint(is_prime(17", "**Prime Number Checker Function**\n================================\n\n### Function Definition\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n### Explanation\n\nThis function takes an integer `n` as input and returns `True` if it's prime and `False` otherwise. Here's a step-by-step breakdown:\n\n1. **Handle edge case**: If `n` is less than 2, it's not prime, so we immediately return `False`.\n2. **Iterate from 2 to sqrt(n)**: We only need to check divisibility up to the square root of `n` because a larger factor of the number would be a multiple of a smaller factor that has already been checked.\n3. **Check for divisibility**: For each `i` in the", "**Prime Number Checker Function**\n================================\n\n### Implementation\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is a prime number.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n### Explanation\n\nThis function uses a simple trial division method to check if a number is prime. Here's how it works:\n\n1.  If the input number `n` is less than 2, it is not prime, so the function returns `False`.\n2.  The function then iterates from 2 to the square root of `n` (inclusive). This is because a larger factor of the number must be a multiple of a smaller factor that has already been checked.\n3.  For each number `i` in this range, the function checks if `n` is divisible by `i` by using the modulo operator (`n % i ==", "**Implementing a Prime Number Checker in Python**\n=====================================================\n\nHere's a Python function `is_prime(n)` that uses a helper function `check_prime_factors()` to check if a number `n` is prime. This function works by checking divisibility up to the square root of `n`, as any factor larger than that would have a corresponding factor smaller than the square root.\n\n```python\nimport math\n\ndef check_prime_factors(n, i):\n    \"\"\"\n    Check if n has prime factors up to i.\n    \n    Args:\n    n (int): The number to check.\n    i (int): The upper limit for checking prime factors.\n    \n    Returns:\n    bool: True if n has prime factors up to i, False otherwise.\n    \"\"\"\n    if n % i == 0:\n        return True\n    if i == 1:\n        return False\n    return check_prime_factors(n, i - 1)\n\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i", "**Implementing a Prime Number Check Function in Python**\n=====================================================\n\nHere's a Python function `is_prime(n)` that uses a helper function `is_prime_helper(n, i)` to check if a number `n` is prime or not. This function iterates over numbers from 2 to the square root of `n` to improve efficiency.\n\n```python\nimport math\n\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    return is_prime_helper(n, 2)\n\ndef is_prime_helper(n, i):\n    \"\"\"\n    Helper function to check if a number is prime.\n\n    Args:\n    n (int): The number to check.\n    i (int): The current divisor.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if i * i > n:\n        return True  # If i squared is greater than n, then n is prime\n    if n % i == 0:\n        return False  # If n is divisible by", "**Prime Number Checker Function**\n================================\n\nHere's a Python function that checks whether a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation:**\n\nThis function works by iterating over all numbers from 2 to the square root of `n` (inclusive). If `n` is divisible by any of these numbers, it's not prime. If `n` is not divisible by any of these numbers, it's prime.\n\n**Example Use Cases:**\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\nprint(is_prime(37))  # True\nprint(is_prime(48))  # False\n```\n\n**Note:** This function has a time complexity of O(", "**Implementing a Prime Number Checker in Python**\n====================================================\n\nHere's a Python function `is_prime(n)` that checks whether a given integer `n` is prime or not:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks whether a given integer n is prime or not.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime.\n        return False\n    elif n <= 3:\n        # 2 and 3 are prime numbers.\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        # If n is divisible by 2 or 3, it's not a prime number.\n        return False\n    i = 5\n    while i * i <= n:\n        # We only need to check divisibility up to the square root of n.\n        if n % i == 0 or n % (i + 2) == 0:\n            # If n is divisible by i or i+2, it's not a", "## Implementing a Prime Number Checker in Python\n\nHere's a simple function `is_prime(n)` that checks whether a given integer `n` is prime or not.\n\n### Code\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n### Explanation\n\nThis function takes an integer `n` as input and checks if it is prime. Here's a step-by-step breakdown:\n\n1.  If `n` is less than 2, it is not prime and we immediately return `False`.\n2.  We only need to check divisibility up to the square root of `n` because a larger factor of the number would be a multiple of a smaller factor that has already been checked.\n3.  We iterate over the numbers from 2 to the square root of `n` (inclusive)", "**Prime Number Checker Function**\n================================\n\nHere's a Python function `is_prime(n)` that checks if a given integer `n` is prime.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Explanation:**\n\nThis function first handles the edge cases:\n\n- If `n` is less than or equal to 1, it's not prime.\n- If `n` is 2, it's prime.\n- If `n` is even and not 2, it's not prime.\n\nThen it checks for divisibility by odd numbers up to the square root of `n`. If `n` is", "## Prime Number Check Function\n### Implementation\n\nHere's a simple and efficient Python function to check if a number is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n### Explanation\n\nThis function works by checking divisibility of `n` by all numbers up to its square root. If `n` is divisible by any of these numbers, it's not prime. Otherwise, it's prime.\n\n### Example Use Cases\n\n```python\nprint(is_prime(2))   # True\nprint(is_prime(15))  # False\nprint(is_prime(23))  # True\nprint(is_prime(48))  # False\n```\n\n### Alternative Implementation Using a Helper Function\n\nIf you want to avoid reinventing the wheel, you can use a built-in helper function to check for prim", "**Prime Number Check Function**\n================================\n\nHere is a Python function that checks if a given integer is prime or not:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function works by first checking if the number is less than or equal to 1 (not prime) or if it's 2 (the only even prime number). If the number is divisible by 2, it's not prime.\n\nThen it calculates the maximum possible divisor, which is the square root of the number plus 1. This is because a larger factor of the number must be a multiple of a smaller factor that", "**Implementation of the `is_prime` function in Python**\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:  # numbers less than or equal to 1 are not prime\n        return False\n    if n <= 3:  # 2 and 3 are prime\n        return True\n    if n % 2 == 0 or n % 3 == 0:  # if the number is divisible by 2 or 3, it's not prime\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:  # check for divisibility by 5, 7, 11,...\n            return False\n        i += 6\n    return True\n```\n\n**Explanation**\n\nThis function first checks for special cases where `n` is less than or equal to 1 (not prime)", "**Implementing the `is_prime` Function in Python**\n====================================================\n\nHere's a Python function `is_prime(n)` that checks if a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Example Use Cases:**\n\n```python\n# Test the function with some examples\nprint(is_prime(2))   # Expected output: True\nprint(is_prime(15))  # Expected output: False\nprint(is_prime(29))  # Expected output: True\nprint(is_prime(31))  # Expected output: True\nprint(is_prime(35))  # Expected output: False\n```\n\nThis function works by checking if the input number `n` is divisible by any integer `i` from 2 to", "**Prime Number Checker Function**\n================================\n\nHere is a Python function that checks if a given integer is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function works by checking all numbers from 2 to the square root of `n` (inclusive) to see if they divide `n` evenly. If any of them do, `n` is not prime. If none of them do, `n` is prime.\n\n**Example Use Cases**\n---------------------\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\nprint(is_prime(37))  # True\nprint(is_prime(48))  # False\n```\n\n**Optimization**\n----------------\n\nThis function has a time complexity of", "**Prime Number Check Function**\n==========================\n\nHere's a Python function that checks if a given integer is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n\n    # Check if n is less than 2, in which case it's not prime\n    if n < 2:\n        return False\n\n    # Check if n is divisible by any number up to its square root\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    # If no divisors found, n is prime\n    return True\n```\n\n**Example Usage**\n---------------\n\n```python\nprint(is_prime(11))  # True\nprint(is_prime(15))  # False\nprint(is_prime(2))   # True\nprint(is_prime(1))   # False\n```\n\n**Explanation**\n--------------\n\nThis function works by checking divisibility up to the square root of the input number. This is an optimization", "**Prime Number Check Function**\n================================\n\nHere's a Python function `is_prime(n)` that checks if a given integer `n` is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer `n` is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function first checks if `n` is less than 2. If so, it immediately returns `False` because all numbers less than 2 are not prime. \n\nThen, it iterates over all numbers from 2 to the square root of `n` (inclusive). If `n` is divisible by any of these numbers, it's not a prime number and the function returns `False`.\n\nIf `n` is not divisible by any of these numbers, it's a prime number and the function returns `True`.\n\n**", "**Prime Number Checker Function**\n================================\n\nHere's a Python function that uses a simple and efficient approach to check if a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n\n**How it works:**\n\n1.  If `n` is less than or equal to 1, it's not prime.\n2.  If `n` is 2 or 3, it's prime.\n3.  If `n` is divisible by 2 or 3, it's not prime.\n4.  We only need", "**Prime Number Checker Function**\n================================\n\nHere is a Python function `is_prime(n)` that checks if a given integer `n` is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation**\n\nThis function works by checking if the given number `n` has any divisors other than 1 and itself. It only needs to check up to the square root of `n` because a larger factor of the number would be a multiple of a smaller factor that has already been checked.\n\n**Example Use Cases**\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\nprint(is_prime(37))  # True\nprint(is_prime(48))  # False\n```\n\n**Note**\n\nThis function uses", "## Implementing the `is_prime` Function\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 1:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # 2 is the only even prime number\n    if n == 2:\n        return True\n\n    # All other even numbers are not prime\n    if n % 2 == 0:\n        return False\n\n    # Check odd factors up to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    # If no factors found, the number is prime\n    return True\n```\n\n## Example Use Cases\n\n```python\nprint(is_prime(2))  # True\nprint(is_prime(3", "**Implementation of the `is_prime` Function in Python**\n===========================================================\n\nHere is a high-quality, readable, and well-documented implementation of the `is_prime` function in Python:\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n\n    Raises:\n    TypeError: If n is not an integer.\n    ValueError: If n is less than 2.\n    \"\"\"\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Check if n is less than 2\n    if n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2.\")\n\n    # 2 is the only even prime number\n    if n == 2:\n        return True\n\n    # All other even numbers are not prime\n    if n % 2 == 0:\n        return False\n\n    # Check odd factors up to the square root of n\n    for i in range(3, int(n", "## Python Function to Check if a Number is Prime\n### Implementation\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime\n        return False\n    if n == 2:\n        # 2 is the only even prime number\n        return True\n    if n % 2 == 0:\n        # If the number is even and not 2, it's not prime\n        return False\n    # Check odd factors up to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            # If n is divisible by any odd factor, it's not prime\n            return False\n    # If no factors are found, n is prime\n    return True\n```\n\n### Example Use Cases\n\n```python\nprint(is_prime(2))  # True", "## Python Function to Check for Primality\n\nHere's a Python function that checks whether a given integer `n` is prime or not:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer `n` is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime\n        return False\n    elif n <= 3:\n        # 2 and 3 are prime numbers\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        # If `n` is divisible by 2 or 3, it's not prime\n        return False\n    i = 5\n    while i * i <= n:\n        # Check for factors starting from 5\n        if n % i == 0 or n % (i + 2) == 0:\n            # If `n` is divisible by `i` or `i + 2`, it's not prime\n            return False\n        i +=", "## Implementing a Prime Number Checker in Python\n\nHere's a simple and efficient function to check if a number is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 2:\n        raise ValueError(\"Input must be a positive integer.\")\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\nThis function takes an integer `n` and returns `True` if it is prime and `False` otherwise. It first checks if `n` is a positive integer, then checks if it is 2 (the only even prime number), and finally checks divisibility up to the square root of `n", "**Prime Number Checker Function**\n================================\n\nHere's a Python function `is_prime(n)` that uses a simple trial division method to check if a given integer `n` is prime.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer `n` is prime.\n\n    Args:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function first checks if the input `n` is less than 2, in which case it immediately returns `False`, as numbers less than 2 are not prime.\n\nThen, it iterates over all numbers from 2 to the square root of `n` (inclusive). If `n` is divisible by any of these numbers, it is not prime and the function returns `False`. If `n` passes this check, it is considered prime and the function returns `True`.\n\n**Example Use Cases", "**Prime Number Check Function**\n================================\n\nHere is a Python function that checks whether a given integer is prime or not:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(5))  # True\nprint(is_prime(10))  # False\nprint(is_prime(17))  # True\nprint(is_prime(24))  # False\n```\n\n**Explanation**\n---------------\n\nThis function uses a simple trial division method to check for primality. Here's how it works:\n\n1. If `n` is less than or equal to 1, it's not prime, so we return False.\n2. We iterate over all numbers from 2 to the square root of `n` (inclusive). We", "## Implementing the `is_prime` Function in Python\n\nHere's a Python function that uses a simple trial division method to check if a given integer `n` is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The integer to check for primality.\n\n    Returns:\n        bool: True if the integer is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n### Example Use Cases:\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\nprint(is_prime(37))  # True\nprint(is_prime(48))  # False\n```\n\n### Explanation:\n\nThis function works by:\n\n1. Checking if the number is less than or equal to 1 (not prime", "**Implementing a Prime Number Checker in Python**\n=====================================================\n\nHere's a simple and efficient function `is_prime(n)` that checks whether a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer n is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n\n    Raises:\n    ValueError: If n is not an integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2\")\n    \n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n\n    return True\n```\n\n**Explanation:**\n\n1. We first check if the input `n` is an integer and greater than or equal to 2. If not, we raise a `ValueError`.\n2", "**Prime Number Checker Function**\n================================\n\nHere is a Python function that checks if a given integer is prime or not:\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function works by checking if the input number `n` has any divisors other than 1 and itself. If it does, it is not prime. If it doesn't, it is prime.\n\nThe loop starts from 2 and goes up to the square root of `n` (since a larger factor of the number would be a multiple of a smaller factor that has already been checked). If `n` is divisible by any of these numbers, it is not prime, so the function returns `False`. If the loop completes without finding any divisors, the function returns", "## Implementing a Prime Number Checker in Python\n### Code\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer `n` is a prime number.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if `n` is prime, False otherwise.\n\n    Raises:\n        ValueError: If `n` is less than 2.\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2\")\n\n    # We only need to check up to the square root of `n` for factors\n    for i in range(2, int(n ** 0.5) + 1):\n        # If `n` is divisible by any `i` in this range, it's not a prime number\n        if n % i == 0:\n            return False\n    return True\n```\n\n### Explanation\n\nThe function `is_prime(n)` checks whether a given integer `n` is prime or not. It does this by testing if `n` is divisible by any integer from 2 to the square root of `n`. If it finds any divisor, it immediately", "**Implementation of `is_prime(n)` Function**\n==============================================\n\nHere's a Python function that checks whether a given integer is prime or not:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n\n    Raises:\n        TypeError: If n is not an integer.\n        ValueError: If n is less than 2.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2.\")\n\n    if n == 2:\n        return True\n\n    if n % 2 == 0:\n        return False\n\n    max_divisor = int(n ** 0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n\n    return True\n```\n\n**Explanation and Example Use Cases**\n----------------------------------\n\nThis function works by first checking if the input `n` is an integer and if it", "**Prime Number Check Function**\n================================\n\nHere is a Python function `is_prime(n)` that checks if a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function uses a simple trial division method to check for primality. It first checks if the number is less than or equal to 1 (in which case it's not prime) or less than or equal to 3 (in which case it's prime). It then checks if the number is divisible by 2 or", "## Prime Number Checker Function\n\nHere's a Python function that checks if a given integer `n` is prime.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer `n` is prime.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n\nThis function uses a simple trial division method to check if a number is prime. It first handles the cases where `n` is less than or equal to 1, and then checks if `n` is divisible by 2 or 3. If it is, it returns `False`. Then, it checks divisibility by all the odd numbers from 5 to the square root of", "**Implementing the `is_prime` Function**\n======================================\n\nHere is a Python function that uses a simple iterative approach to check if a number `n` is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number `n` is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n ** 0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\nprint(is_prime(37))  # True\nprint(is_prime(48))  # False\n```\n\n**Explanation**\n---------------\n\nThe function `is_prime(n)` first checks if `n` is less", "**Implementing the `is_prime` Function in Python**\n=====================================================\n\nHere's a high-quality, readable, and well-documented implementation of the `is_prime` function in Python:\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given integer `n` is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        # Only need to check up to the square root of `n`\n        if n % i == 0:\n            # If `n` is divisible by any number in this range, it's not prime\n            return False\n    # If `n` is not divisible by any number in the range, it's prime\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function uses a simple and efficient approach to check for primality:\n\n1.  If `n` is less than or equal", "**Prime Number Checker Function**\n================================\n\nHere's a Python function `is_prime(n)` that checks whether a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n\n    Raises:\n        TypeError: If n is not an integer.\n        ValueError: If n is less than 2.\n    \"\"\"\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Check if n is less than 2\n    if n < 2:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Check if n is divisible by any number up to its square root\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n```\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\nprint(is_prime(", "**Prime Number Checker Function**\n================================\n\nHere's a simple implementation of the `is_prime` function in Python:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation**\n\nThis function takes an integer `n` as input and returns `True` if `n` is prime and `False` otherwise.\n\nHere's a step-by-step breakdown:\n\n1.  If `n` is less than 2, it's not prime, so we immediately return `False`.\n2.  We only need to check divisors up to the square root of `n` because a larger factor of the number would be a multiple of a smaller factor that has already been checked.\n3.  We iterate from 2 to the square root of `n` and check if `n` is divisible by any", "**Implementing a Prime Number Check Function in Python**\n=====================================================\n\nHere's a Python function `is_prime(n)` that checks if a given integer `n` is prime. This function uses a simple trial division method, checking divisibility up to the square root of `n`.\n\n```python\nimport math\n\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n\n    Raises:\n    ValueError: If n is less than 2.\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2.\")\n\n    if n == 2:\n        return True  # 2 is the only even prime number\n\n    if n % 2 == 0:\n        return False  # All other even numbers are not prime\n\n    # Only check odd factors up to the square root of n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True\n```\n\n**Example Use", "**Implementing the `is_prime` Function**\n=====================================\n\nHere's a simple Python function to check if a given integer `n` is prime or not:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function uses the following approach:\n\n1.  If `n` is less than or equal to 1, it's not prime.\n2.  If `n` is 2, it's prime.\n3.  If `n` is divisible by 2, it's not prime.\n4.  We only need to check odd divisors up to", "**Implementing the `is_prime` Function**\n======================================\n\nHere's a Python function that checks if a given integer `n` is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer `n` is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function uses the following steps to determine if a number is prime:\n\n1. If `n` is less than or equal to 1, it's not prime.\n2. If `n` is 2, it's prime.\n3. If `n` is an even number greater than 2, it's not prime.\n4. We only", "**Prime Number Checker Function**\n================================\n\nHere's a Python function that checks whether a given integer is prime or not:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(5, max_divisor, 6):\n        if n % d == 0 or n % (d + 2) == 0:\n            return False\n    return True\n```\n\n**Explanation:**\n\nThis function uses a combination of basic checks and a loop to determine whether a number is prime.\n\n1. If the number is less than or equal to 1, it's not prime.\n2. If the number is less than or equal to 3, it's prime.\n3. If the number is divisible", "**Prime Number Check Function**\n================================\n\nHere's a Python function `is_prime(n)` that checks if a given integer `n` is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation:**\n\nThis function works by checking divisibility of `n` by all numbers up to its square root. If `n` is divisible by any of these numbers, it is not prime. If `n` is not divisible by any of these numbers, it is prime.\n\n**Example Use Cases:**\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\nprint(is_prime(37))  # True\nprint(is_prime(48))  # False\n```\n\n**Optimized Version**\n\nIf you want to optimize", "**Prime Number Check Function**\n================================\n\nHere's a Python function `is_prime(n)` that checks if a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n\n    Raises:\n        TypeError: If n is not an integer.\n        ValueError: If n is less than 2.\n    \"\"\"\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Check if n is less than 2\n    if n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2.\")\n\n    # Check if n is less than or equal to 1\n    if n == 1:\n        return False\n\n    # Check if n is divisible by any number up to its square root\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n``", "## Prime Number Check Function\n\nThe following Python function checks if a given number is prime or not. This function uses a helper function `is_prime_helper` to perform the prime check. It iterates from 2 to the square root of the given number and checks if the number has any divisors other than 1 and itself.\n\n```python\nimport math\n\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for d in range(3, max_divisor + 1, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n### Example Use Cases:\n\n```python\nprint(is_prime(2))   # True\nprint(is_prime(15))  # False\nprint(is_prime(17))  # True\nprint(is_prime(36))  # False", "## Prime Number Checker Function\n### Implementation\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n### Explanation\n\nThis function works by checking if the input number `n` has any divisors other than 1 and itself. If it does, then it's not a prime number.\n\nHere's how it works:\n\n1. If `n` is less than 2, it's not prime, so we immediately return `False`.\n2. We only need to check divisors up to the square root of `n`, because a larger factor of the number would be a multiple of a smaller factor that has already been checked.\n3. We iterate over the numbers from 2 to the square root of `n` and check if `n` is divisible by any of them. If", "**Implementing a Prime Number Check Function in Python**\n======================================================\n\nHere's a Python function that checks whether a given integer is prime or not:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Explanation:**\n\nThis function works by first checking if `n` is less than or equal to 1 (in which case it's not prime), or if `n` is 2 (which is the only even prime number). If `n` is divisible by 2, it's not prime. We then only need to check divisibility up to the square root of `n`, as any factors larger than that", "**Prime Number Checker Function**\n================================\n\nHere is a high-quality, readable, and well-documented Python function to check if a given integer is prime:\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(25))  # Output: False\nprint(is_prime(23))  # Output: True\nprint(is_prime(37))  # Output: True\nprint(is_prime(48))  # Output: False\n```\n\n**Explanation**\n-------------\n\nThis function uses a simple trial division approach to check if a given integer `n` is prime. Here's a step-by-step breakdown:\n\n1. If `n` is less than or equal to 1, it's not", "**Implementation of `is_prime(n)` Function**\n==========================================\n\nHere's a Python function that checks whether a given integer `n` is prime or not. This function uses a simple trial division method for this purpose.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime\n        return False\n    if n == 2:\n        # 2 is the only even prime number\n        return True\n    if n % 2 == 0:\n        # Even numbers greater than 2 are not prime\n        return False\n    max_divisor = int(n**0.5) + 1\n    # Check odd divisors up to the square root of n\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            # If n is divisible by any number between 3 and the square root of n, it's not prime\n            return", "## Implementing the `is_prime` Function in Python\n\nHere is a Python function that checks if a given integer is prime:\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The integer to check for primality.\n\n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime\n        return False\n    if n <= 3:\n        # 2 and 3 are prime\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        # If n is divisible by 2 or 3, it's not prime\n        return False\n    i = 5\n    while i * i <= n:\n        # Check divisibility up to the square root of n\n        if n % i == 0 or n % (i + 2) == 0:\n            # If n is divisible by any number in the sequence 5, 7, 9,..., then it's not prime\n            return False\n       ", "**Implementing the `is_prime` Function in Python**\n=====================================================\n\nHere is a simple and efficient implementation of the `is_prime` function in Python. This function uses a trial division method to check if a number is prime.\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime\n        return False\n    if n == 2:\n        # 2 is the only even prime number\n        return True\n    if n % 2 == 0:\n        # Even numbers greater than 2 are not prime\n        return False\n    max_divisor = int(n**0.5) + 1\n    # Only need to check odd divisors up to sqrt(n)\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            # If n is divisible by any odd number, it's not prime\n            return", "**Prime Number Checker Function**\n================================\n\nHere's a Python function `is_prime(n)` that checks whether a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n\n**Example Usage**\n---------------\n\n```python\nprint(is_prime(2))    # True\nprint(is_prime(15))   # False\nprint(is_prime(23))   # True\nprint(is_prime(34))   # False\nprint(is_prime(37))   # True\nprint(is_prime(48))   # False\n``", "**Prime Number Check Function**\n================================\n\nHere's a Python function that checks if a given integer is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function works by first checking if `n` is less than or equal to 1 (not prime), if `n` is 2 (the only even prime number), or if `n` is divisible by 2 (not prime). If none of these conditions are met, it checks divisibility up to the square root of `n` (since any factor larger than the square root would have a corresponding factor smaller", "**Prime Number Checker Function**\n================================\n\nHere's a Python function `is_prime(n)` that checks whether a given integer `n` is prime or not.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation:**\n\n1. If `n` is less than or equal to 1, it's not prime, so return False.\n2. We only need to check divisibility up to the square root of `n` since a larger factor of the number would be a multiple of a smaller factor that has already been checked.\n3. We iterate from 2 to the square root of `n` (inclusive) and check if `n` is divisible by any of these numbers.\n4. If `n` is divisible by any of these numbers, it's not prime,", "## Prime Number Checker Function\n\nHere's a simple and efficient Python function to check if a number is prime.\n\n### Code\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n\n    Raises:\n    TypeError: If n is not an integer.\n    ValueError: If n is less than 2.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 2:\n        raise ValueError(\"Input must be greater than or equal to 2.\")\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n### Explanation\n\nThis function works by first checking if the input `n` is less than 2, in which case it's not prime. If `n` is 2, it", "**Implementing the `is_prime` Function**\n======================================\n\nHere's a Python function that checks whether a given integer `n` is prime or not. This function uses a simple trial division method to check for primality.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks whether a given integer is prime or not.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime\n        return False\n    if n == 2:\n        # 2 is the only even prime number\n        return True\n    if n % 2 == 0:\n        # If the number is even and not 2, it's not prime\n        return False\n\n    # Check odd factors up to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            # If n is divisible by any odd factor, it's not prime\n            return False\n\n    # If no factors are", "**Implementing the `is_prime` Function**\n======================================\n\nHere's a Python function that checks whether a given integer is prime:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 1:\n        raise ValueError(\"Input must be a positive integer\")\n\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```\n\n**Explanation:**\n\n1.  Check if the input `n` is a positive integer. If it's not, raise a `ValueError`.\n2.  If `n` is 2, it's a prime number, so return `True`.\n3. ", "**Prime Number Checker Function**\n================================\n\nHere's a simple and efficient implementation of the `is_prime` function in Python:\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a number `n` is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if `n` is prime, False otherwise.\n\n    Raises:\n        TypeError: If `n` is not an integer.\n        ValueError: If `n` is less than 2.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 2:\n        raise ValueError(\"Input must be an integer greater than or equal to 2.\")\n\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    max_divisor = int(n ** 0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n\n    return True\n```\n\n**Example Use Cases:**\n\n```python\nprint(is_prime(2))  # True\nprint(is_prime(3)) ", "**Implementing a Prime Number Checker in Python**\n=====================================================\n\nHere's a high-quality, readable, and well-documented implementation of the `is_prime` function in Python:\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given integer is a prime number.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        # Numbers less than or equal to 1 are not prime\n        return False\n    if n <= 3:\n        # 2 and 3 are prime numbers\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        # If n is divisible by 2 or 3, it's not prime\n        return False\n    i = 5\n    while i * i <= n:\n        # Only need to check odd factors up to the square root of n\n        if n % i == 0 or n % (i + 2) == 0:\n            # If n is divisible by any odd number, it's not prime\n           ", "## Implementing the `is_prime(n)` Function in Python\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer `n` is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if `n` is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n## Explanation\n\nThis function uses a simple trial division method to check for primality. Here's a step-by-step breakdown:\n\n1.  If `n` is less than or equal to 1, it's not prime, so we immediately return `False`.\n2.  We only need to check divisors up to the square root of `n`, because a larger factor of `n` must be a multiple of a smaller factor that has already been checked.\n3.  We iterate from 2 to the square root of `n` and check if `n` is divisible by any of these numbers. If it is, it's", "**Prime Number Check Function**\n================================\n\n### Implementation\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 2:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # 2 is the only even prime number\n    if n == 2:\n        return True\n\n    # All other even numbers are not prime\n    if n % 2 == 0:\n        return False\n\n    # Check odd factors up to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    # If no factors found, n is prime\n    return True\n```\n\n### Example Use Cases\n\n```python\nprint(is_prime(25))  # False\nprint(is_prime(23))  # True\n", "**Prime Number Checker Function**\n================================\n\nHere's a high-quality, readable, and well-documented Python function to check if a given integer is prime:\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The integer to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n\n    # Handle edge cases\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n\n    # Check for factors other than 1 and the number itself\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n```\n\n**Explanation**\n---------------\n\nThis function takes an integer `n` as input and checks if it's prime by attempting to find any divisors between 2 and the square root of `n`. If a divisor is found, the number is not prime; otherwise, it is prime.\n\n**Example Use Cases**\n--------------------\n\n```python\nprint(is_prime(5))  # True\nprint(is_prime(10", "**Prime Number Checker Function**\n================================\n\nHere's a Python function that uses a simple trial division method to check if a given integer `n` is prime.\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Checks if a given integer is prime.\n\n    Args:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**Explanation:**\n\n1. If `n` is less than or equal to 1, it's not prime, so we immediately return `False`.\n2. We loop through all numbers from 2 to the square root of `n` (inclusive). If `n` is divisible by any of these numbers, it's not prime.\n3. If we reach the end of the loop without finding a divisor, `n` is prime, so we return `True`.\n\n**Example Use Cases:**\n\n```python\nprint(is_prime(25))  # False\n"]}